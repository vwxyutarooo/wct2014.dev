@charset "utf-8";
/* =========================================================
	 extends
========================================================= */
// Table
%table{
	display: table;
	vertical-align: middle;
	>*{
		display: table-row;
		vertical-align: middle;
		>*{
			display: table-cell;
			vertical-align: middle;
		}
	}
}
// Clearfix
%group{
	&:after {
		display: block;
		visibility: hidden;
		clear: both;
		height: 0;
		content: ".";
		font-size: 0;
	}
}

@mixin hasPseudoClass($loc:false, $position: absolute){
	position: relative;
	@if $loc == before{
		&:before{
			display: block;
			content: "";
			position: $position;
		}
	}@else if $loc == after{
		&:after{
			display: block;
			content: "";
			position: $position;
		}
	}@else{
		&:before,
		&:after{
			display: block;
			content: "";
			position: $position;
		}
	}
}

//***********************
// imageReplace
// @param $name
//***********************
@mixin imageReplace($path, $imgWidth, $imgHeight, $scale: 1, $position: 0 0, $size: 100%, $repeat: no-repeat){
  display: block;
  overflow: hidden;
  padding-top: $imgHeight * $scale;
  width: $imgWidth * $scale;
  height: 0;
  background-image: url($filePath + $path);
  background-position: $position;
  background-size: $size;
  background-repeat: $repeat;
}

//***********************
// Sprite css image replacement (Medium size)
// @param $name
//***********************
@mixin sprite-ir-M($sprite){
	@include sprite($sprite);
	display: block;
	overflow: hidden;
	padding-top: nth($sprite, 6);
	height: 0;
	background-repeat: no-repeat; 
}


//***********************
// Original functions
//***********************
// Insert icon font
@mixin genericon($content:'\f100', $fontsize: 16px, $valaign: text-bottom, $position: static){
	position: $position;
	display: inline-block;
	content: $content;
	vertical-align: $valaign;
	font-size: $fontsize;
	font-family: Genericons;
	line-height: 1em;
}
@mixin fa($content: '', $fontsize: 16px, $valaign: baseline){
	display: inline-block;
	content: $content;
	vertical-align: $valaign;
	text-decoration: inherit;
	font-weight: normal;
	font-style: normal;
	font-size: $fontsize;
	font-family: FontAwesome;
	-webkit-font-smoothing: antialiased;
}

// Animates
@keyframes fadeIn{
	0%{ opacity: 0; }
	100%{ opacity: 1; }
}
%fadeIn{
	animation-name: fadeIn;
	animation-duration: .5s;
	animation-fill-mode: both;
}
@keyframes hoverDown{
	0%{ transform: translate(0, -500px); }
	100%{ transform: translate(0, 0); }
}
@keyframes hovering{
	0%{ transform: translate(0, 0px); }
	50%{ transform: translate(0, 8%); }
	100%{ transform: translate(0, -0px); }
}
@keyframes weight{
	0%{ transform: translate(0, -500px); }
	100%{ transform: translate(0, 0); }
}
%hoverDown{
	animation-name: hoverDown;
	animation-duration: 3s;
	animation-fill-mode: both;
	animation-iteration-count: 1;
}
%hovering{
	animation-name: hoverDown, hovering;
	animation-duration: 2s, 3s;
	animation-timing-function: ease-out, ease-in-out;
	animation-delay: 1s, 0.1s;
	animation-iteration-count: 1, infinite;
	animation-direction: normal, normal;
	animation-fill-mode: backwards, none;
	// animation: hoverDown ease-in 2000ms 1000ms 1 backwards normal, ease-in-out hovering 3000ms 100ms infinite forwards normal;
}

@mixin buttonAction($color: rgba(0, 0, 0, 0.25), $height: 20px, $depth: 2px){
	&:before{
		transition: all 0.1s;
		display: block;
		content: "";
		background-color: transparent;
		height: 0;
		width: 100%;
		top: 0;
		position: relative;
	}
	&:hover{
		&:before{
			height: 2px;
		}
		.snsButton__wrap,
		.button__wrap {
			box-shadow: 0 2px $color;
			margin-bottom: -2px;
		}
	}
	&:active{
		&:before{
			height: 4px;
		}
		.snsButton__wrap,
		.button__wrap {
			box-shadow: 0 0 $color;
			margin-bottom: -4px;
		}
	}
	.snsButton__wrap,
	.button__wrap {
		box-shadow: 0 4px $color;
		transition: all 0.1s;
	}
}


// Triangle
@mixin triangle($direction, $width, $height, $color) {
	width: 0;
	height: 0;
	@if $direction == 'up' { 
		border-right: $height / 2 solid transparent;
		border-bottom: $width solid $color; 
		border-left: $height / 2 solid transparent; 
	} @else if $direction == 'down' {
		border-top: $width solid $color; 
		border-right: $height / 2 solid transparent; 
		border-left: $height / 2 solid transparent; 
	} @else if $direction == 'left' {
		border-top: $height / 2 solid transparent; 
		border-right: $width solid $color; 
		border-bottom: $height / 2 solid transparent; 
	} @else if $direction == 'right' {
		border-top: $height / 2 solid transparent; 
		border-bottom: $height / 2 solid transparent; 
		border-left: $width solid $color; 
	}
}

@mixin corner-triangle($corner, $size, $color) {
	width: 0;
	height: 0;
	@if $corner == 'top-left' { 
		border-top: $size solid $color;
		border-right: $size solid transparent;
	} @else if $corner == 'top-right' {
		border-top: $size solid $color;
		border-left: $size solid transparent; 
	} @else if $corner == 'bottom-left' {
		border-right: $size solid transparent;
		border-bottom: $size solid $color;
	} @else if $corner == 'bottom-right' {
		border-bottom: $size solid $color;
		border-left: $size solid transparent;
	}
}